<iscontent type="application/javascript" charset="UTF-8" compact="true" />
importScripts('https://storage.googleapis.com/workbox-cdn/releases/5.1.2/workbox-sw.js');

var OFFLINE_CACHE = 'offline-html';
var FALLBACK_HTML_URL = "${URLUtils.https("Pwa-Offline")}"

self.addEventListener('install', function (event) {
  console.log('Install Event processing');
  self.skipWaiting();
  var urls = [FALLBACK_HTML_URL];
  event.waitUntil(caches.open(OFFLINE_CACHE).then((cache) => cache.addAll(urls)));
});

if (workbox) {
  console.log(`Yay! Workbox is loaded ðŸŽ‰`);
} else {
  console.log(`Boo! Workbox didn't load ðŸ˜¬`);
}
var { strategies } = workbox;
var { NetworkOnly } = strategies;

workbox.navigationPreload.enable();
var networkOnly = new NetworkOnly();
var navigationHandler = async (params) => {
  try {
    // Attempt a network request.
    return await networkOnly.handle(params);
  } catch (error) {
    // If it fails, return the cached HTML.
    return caches.match(FALLBACK_HTML_URL, {
      cacheName: OFFLINE_CACHE,
    });
  }
};

// Register this strategy to handle all navigations.
workbox.routing.registerRoute(
  new workbox.routing.NavigationRoute(navigationHandler)
);

// Google Fonts
workbox.routing.registerRoute(
  function ({ url }) {
    return url.origin === 'https://fonts.googleapis.com' ||
      url.origin === 'https://fonts.gstatic.com';
  },
  new workbox.strategies.StaleWhileRevalidate({
    cacheName: 'google-fonts',
    plugins: [
      new workbox.expiration.ExpirationPlugin({
        maxEntries: 30,
      }),
      new workbox.cacheableResponse.CacheableResponsePlugin({
        statuses: [0, 200]
      }),
    ],
  }),
);

// Custom fonts
workbox.routing.registerRoute(
  function ({ request }) {
    return request.destination === 'font';
  },
  new workbox.strategies.StaleWhileRevalidate({
    cacheName: 'custom-fonts',
    plugins: [
      new workbox.expiration.ExpirationPlugin({
        maxEntries: 30,
      }),
      new workbox.cacheableResponse.CacheableResponsePlugin({
        statuses: [0, 200]
      }),
    ],
  }),
);

// JS & CSS
workbox.routing.registerRoute(
  function ({ request }) {
    return request.destination === 'script' ||
      request.destination === 'style';
  },
  new workbox.strategies.StaleWhileRevalidate({
    cacheName: 'styles-scripts-cache',
    plugins: [
      new workbox.expiration.ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      })
    ]
  })
);


// Cache images
workbox.routing.registerRoute(
  function ({ request }) {
    return request.destination === 'image';
  },
  new workbox.strategies.CacheFirst({
    cacheName: 'images-cache',
    plugins: [
      new workbox.cacheableResponse.CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new workbox.expiration.ExpirationPlugin({
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      })
    ]
  })
);